name: Release

on:
  push:
    paths-ignore:
      - "**.md"
      - "docs/**"
  pull_request:
    paths-ignore:
      - "**.md"
      - "docs/**"

jobs:

  get-source-code:
    name: Source code
    uses: ./.github/workflows/source-code.yaml
    with:
      download-from-netlib: ${{ github.ref_name == 'release' || startsWith(github.ref, 'refs/tags/') }}
      minpack-builder-version: 1.1.0
  
  build-mingw32:
    name: GFortran MINGW32
    uses: ./.github/workflows/msys2.yaml
    needs: get-source-code
    with:
      system: mingw32

  build-mingw64:
    name: GFortran MINGW64
    uses: ./.github/workflows/msys2.yaml
    needs: get-source-code
    with:
      system: mingw64

  build-ucrt64:
    name: GFortran UCRT64
    uses: ./.github/workflows/msys2.yaml
    needs: get-source-code
    with:
      system: ucrt64

  build-clang64:
    name: LLVM flang-new GCC-like
    uses: ./.github/workflows/msys2.yaml
    needs: get-source-code
    with:
      system: clang64

  build-llvm-flang-new-msvc-like:
    name: LLVM flang-new MSVC-like
    uses: ./.github/workflows/llvm-flang-new-msvc-like.yaml
    needs: get-source-code

  generate-msi-project:
    name: Generate MSI Project
    uses: ./.github/workflows/generate-msi-wixtoolset-v5-project.yaml
    needs:
      - get-source-code
      - build-mingw32
      - build-mingw64
      - build-ucrt64
      - build-clang64
      - build-llvm-flang-new-msvc-like

  msi-en-us:
    name: MSI for en-US
    uses: ./.github/workflows/msi.yaml
    needs:
      - generate-msi-project
    with:
      culture: en-us

  msi-pt-br:
    name: MSI for pt-BR
    uses: ./.github/workflows/msi.yaml
    needs:
      - generate-msi-project
    with:
      culture: pt-br

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - msi-en-us
      - msi-pt-br
    
    steps:
      - name: Download MSI for en-US culture
        uses: actions/download-artifact@v4
        with:
          name: msi-en-us
          path: msi-en-us

      - name: Download MSI for pt-BR culture
        uses: actions/download-artifact@v4
        with:
          name: msi-pt-br
          path: msi-pt-br
      
      - name: Prepare directory to upload
        run: |
          installer_version_en_us=$(cat msi-en-us/installer-version.txt);
          installer_version_pt_br=$(cat msi-pt-br/installer-version.txt);
          if [ "${installer_version_en_us}" != "${installer_version_pt_br}" ];
          then
            bash -lc "echo -e 'Installer version mismatch between culture en-US and pt-BR: \e[33men-US version (${installer_version_en_us})\e[0m is not equal to \e[33m pt-BR version (${installer_version_pt_br})\e[0m'";
            exit 1;
          fi
          installer_version=${installer_version_en_us}
          echo "INSTALLER_VERSION=${installer_version}" >> $GITHUB_ENV
          rm -rf distribution && mkdir -p distribution
          cp -r msi-en-us distribution
          cp -r msi-pt-br distribution

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ env.INSTALLER_VERSION }}
          path: distribution
          retention-days: 1
          if-no-files-found: error